#!/bin/bash
# MCP Grid Setup Script - Filesystem (Linux)
# Sets up the Filesystem MCP server for file operations

echo "üìÅ INITIALIZING FILESYSTEM PROTOCOL..."
echo ""

# Check if Node.js is installed
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "‚úì Node.js detected: $NODE_VERSION"
else
    echo "‚ùå Node.js not found. Please install Node.js first."
    echo "   Installation options:"
    echo "   ‚Ä¢ Ubuntu/Debian: sudo apt update && sudo apt install nodejs npm"
    echo "   ‚Ä¢ CentOS/RHEL: sudo yum install nodejs npm"
    echo "   ‚Ä¢ Fedora: sudo dnf install nodejs npm"
    echo "   ‚Ä¢ Arch: sudo pacman -S nodejs npm"
    echo "   ‚Ä¢ Or download from: https://nodejs.org/"
    exit 1
fi

# Check if npm is available
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    echo "‚úì NPM detected: $NPM_VERSION"
else
    echo "‚ùå NPM not found. Please install NPM first."
    exit 1
fi

echo ""
echo "üöÄ INSTALLING FILESYSTEM MCP SERVER..."

# Install the Filesystem MCP server
if npm install -g @modelcontextprotocol/server-filesystem; then
    echo "‚úì Filesystem MCP server installed successfully"
else
    echo "‚ùå Failed to install Filesystem MCP server"
    echo "   Trying alternative installation method..."

    # Alternative: local installation
    if mkdir -p mcp-servers/shared/filesystem && \
       cd mcp-servers/shared/filesystem && \
       npm init -y && \
       npm install @modelcontextprotocol/server-filesystem && \
       cd ../../..; then
        echo "‚úì Filesystem MCP server installed locally"
    else
        echo "‚ùå Installation failed. Please check your network connection and try again."
        exit 1
    fi
fi

echo ""
echo "‚öôÔ∏è  CONFIGURING CLAUDE DESKTOP..."

# Define Claude Desktop config path for Linux
CLAUDE_CONFIG_DIR="$HOME/.config/Claude"
CLAUDE_CONFIG_PATH="$CLAUDE_CONFIG_DIR/claude_desktop_config.json"

# Create filesystem config for Linux
cat > mcp-servers/configs/filesystem-config-linux.json << 'EOF'
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/home",
        "/tmp",
        "$(pwd)"
      ]
    }
  }
}
EOF

CONFIG_SOURCE="mcp-servers/configs/filesystem-config-linux.json"

# Create directory if it doesn't exist
if [ ! -d "$CLAUDE_CONFIG_DIR" ]; then
    mkdir -p "$CLAUDE_CONFIG_DIR"
    echo "‚úì Created directory: $CLAUDE_CONFIG_DIR"
fi

# Check if config already exists
if [ -f "$CLAUDE_CONFIG_PATH" ]; then
    echo "‚ö†Ô∏è  Found existing config at: $CLAUDE_CONFIG_PATH"
    echo "   Backing up existing config..."
    cp "$CLAUDE_CONFIG_PATH" "$CLAUDE_CONFIG_PATH.backup"
fi

# Copy our config
if cp "$CONFIG_SOURCE" "$CLAUDE_CONFIG_PATH"; then
    echo "‚úì Deployed config to: $CLAUDE_CONFIG_PATH"
else
    echo "‚ùå Failed to deploy config to: $CLAUDE_CONFIG_PATH"
    echo "   Manual setup required - see filesystem-config-linux.json"
    exit 1
fi

echo ""
echo "üéØ TESTING INSTALLATION..."

# Test if the server can be started
if npx @modelcontextprotocol/server-filesystem --help &> /dev/null; then
    echo "‚úì Filesystem server responds correctly"
else
    echo "‚ö†Ô∏è  Unable to test server - this is normal if Claude Desktop isn't configured yet"
fi

echo ""
echo "üìÅ FILE SYSTEM ACCESS DEPLOYED - FILESYSTEM READY!"
echo ""
echo "Configuration deployed to:"
echo "‚Ä¢ $CLAUDE_CONFIG_PATH"
echo ""
echo "ü§ñ STARTUP BEHAVIOR:"
echo "‚Ä¢ MCP servers start AUTOMATICALLY when Claude Desktop opens"
echo "‚Ä¢ No manual startup required each time you turn on your computer"
echo "‚Ä¢ Claude Desktop manages the server lifecycle"
echo ""
echo "üîê SECURITY:"
echo "‚Ä¢ Access restricted to configured directories only"
echo "‚Ä¢ Sandboxed operations for safe AI interactions"
echo "‚Ä¢ No access to files outside allowed paths"
echo ""
echo "üìÇ ALLOWED DIRECTORIES:"
echo "‚Ä¢ /home (User home directories)"
echo "‚Ä¢ /tmp (Temporary files)"
echo "‚Ä¢ Current working directory"
echo ""
echo "Next steps:"
echo "1. Restart Claude Desktop completely (close and reopen)"
echo "2. Look for 'Filesystem' in Claude's available tools"
echo "3. Test by asking Claude to list files or read a document"
echo ""
echo "Status: OPERATIONAL üìÅ"
